%import common.WS
%import common.ESCAPED_STRING -> STRING
%import common.NUMBER
%import common.CNAME

%ignore WS
%ignore COMMENT

?start: exp_prog
exp_prog: exp_stmt+
exp_block: "{" exp_stmt+ "}"
?exp_stmt: exp _STMT_SEP
?exp: exp_rule | exp_block
?exp_rule: exp_def | "when" exp "then" exp
?exp_def: exp_print | exp_call exp_block
?exp_print: exp_exit | PRINT exp_print
?exp_exit: exp_assert | _EXIT
?exp_assert: exp_del | ASSERT exp_assert
?exp_del: exp_find | DELETE exp_del
?exp_find: exp_create | FIND exp_find
?exp_create: exp_asgn | CREATE exp_create
?exp_asgn: (exp_asgn "=")? exp_or
?exp_or: (exp_or "or")? exp_and
?exp_and: (exp_and "and")? exp_cmp
?exp_cmp: (exp_cmp COMPARE)? exp_term
?exp_term: (exp_term ADD)? exp_factor
?exp_factor: (exp_factor MUL)? exp_not
?exp_not: exp_dot | NOT exp_not // TODO: unary exp and -
?exp_dot: exp_call | exp_dot "." cname
?exp_call: atom | cname "(" arg? ")"
?atom: object | sequence | cname | number | string | "(" exp ")"
?object: cname cname "{" kwarg "}"
sequence: "[" arg? "]" 
arg: exp | exp "," arg+ ","?
kwarg : [pair ("," pair)*]
pair : cname ":" exp

PRINT: "print"
CREATE: "create"
DELETE: "delete"
FIND: "find"
NOT: "not"
ASSERT: "assert"
_EXIT: "exit"
COMMENT: "#" /[^\n]/*
MUL: "*" | "/"
COMPARE:  "==" | "!=" | "<" | ">" | "<=" | ">="
ADD: "+" | "-"
_STMT_SEP: ";" | "\n"

cname: CNAME
number: NUMBER
string: STRING
